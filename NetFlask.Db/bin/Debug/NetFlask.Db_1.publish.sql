/*
Deployment script for NetFlask

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "NetFlask"
:setvar DefaultFilePrefix "NetFlask"
:setvar DefaultDataPath "C:\Users\Mike\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\Mike\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Movie].[Age] on table [dbo].[Movie] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Movie])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[FK_DirectorMovie_ToDirector]...';


GO
ALTER TABLE [dbo].[DirectorMovie] DROP CONSTRAINT [FK_DirectorMovie_ToDirector];


GO
PRINT N'Dropping [dbo].[FK_MovieGenre_ToGenre]...';


GO
ALTER TABLE [dbo].[MovieGenre] DROP CONSTRAINT [FK_MovieGenre_ToGenre];


GO
PRINT N'Dropping [dbo].[FK_Critics_ToMovie]...';


GO
ALTER TABLE [dbo].[Critics] DROP CONSTRAINT [FK_Critics_ToMovie];


GO
PRINT N'Dropping [dbo].[FK_DirectorMovie_ToMovie]...';


GO
ALTER TABLE [dbo].[DirectorMovie] DROP CONSTRAINT [FK_DirectorMovie_ToMovie];


GO
PRINT N'Dropping [dbo].[FK_MovieCast_ToMovie]...';


GO
ALTER TABLE [dbo].[MovieCast] DROP CONSTRAINT [FK_MovieCast_ToMovie];


GO
PRINT N'Dropping [dbo].[FK_MovieGenre_ToMovie]...';


GO
ALTER TABLE [dbo].[MovieGenre] DROP CONSTRAINT [FK_MovieGenre_ToMovie];


GO
PRINT N'Dropping [dbo].[FK_Rating_ToMovie]...';


GO
ALTER TABLE [dbo].[Rating] DROP CONSTRAINT [FK_Rating_ToMovie];


GO
PRINT N'Starting rebuilding table [dbo].[Director]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Director] (
    [IdDirector] INT            NOT NULL,
    [FirstName]  NVARCHAR (MAX) NOT NULL,
    [LastName]   NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([IdDirector] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Director])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Director] ([IdDirector], [FirstName], [LastName])
        SELECT   [IdDirector],
                 [FirstName],
                 [LastName]
        FROM     [dbo].[Director]
        ORDER BY [IdDirector] ASC;
    END

DROP TABLE [dbo].[Director];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Director]', N'Director';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Genre]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Genre] (
    [IdGenre] INT           NOT NULL,
    [Label]   NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([IdGenre] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Genre])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Genre] ([IdGenre], [Label])
        SELECT   [IdGenre],
                 [Label]
        FROM     [dbo].[Genre]
        ORDER BY [IdGenre] ASC;
    END

DROP TABLE [dbo].[Genre];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Genre]', N'Genre';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Movie]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Movie] (
    [IdMovie]          INT            NOT NULL,
    [Title]            NVARCHAR (250) NOT NULL,
    [Duration]         INT            NOT NULL,
    [Picture]          NVARCHAR (250) NOT NULL,
    [Trailer]          NVARCHAR (250) NOT NULL,
    [ReleaseDate]      DATE           NULL,
    [Summary]          NVARCHAR (MAX) NOT NULL,
    [ShortDescription] NVARCHAR (150) NOT NULL,
    [Age]              NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([IdMovie] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Movie])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Movie] ([IdMovie], [Title], [Duration], [Picture], [Trailer], [ReleaseDate], [Summary], [ShortDescription])
        SELECT   [IdMovie],
                 [Title],
                 [Duration],
                 [Picture],
                 [Trailer],
                 [ReleaseDate],
                 [Summary],
                 [ShortDescription]
        FROM     [dbo].[Movie]
        ORDER BY [IdMovie] ASC;
    END

DROP TABLE [dbo].[Movie];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Movie]', N'Movie';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_DirectorMovie_ToDirector]...';


GO
ALTER TABLE [dbo].[DirectorMovie] WITH NOCHECK
    ADD CONSTRAINT [FK_DirectorMovie_ToDirector] FOREIGN KEY ([IdDirector]) REFERENCES [dbo].[Director] ([IdDirector]);


GO
PRINT N'Creating [dbo].[FK_MovieGenre_ToGenre]...';


GO
ALTER TABLE [dbo].[MovieGenre] WITH NOCHECK
    ADD CONSTRAINT [FK_MovieGenre_ToGenre] FOREIGN KEY ([IdGenre]) REFERENCES [dbo].[Genre] ([IdGenre]);


GO
PRINT N'Creating [dbo].[FK_Critics_ToMovie]...';


GO
ALTER TABLE [dbo].[Critics] WITH NOCHECK
    ADD CONSTRAINT [FK_Critics_ToMovie] FOREIGN KEY ([IdMovie]) REFERENCES [dbo].[Movie] ([IdMovie]);


GO
PRINT N'Creating [dbo].[FK_DirectorMovie_ToMovie]...';


GO
ALTER TABLE [dbo].[DirectorMovie] WITH NOCHECK
    ADD CONSTRAINT [FK_DirectorMovie_ToMovie] FOREIGN KEY ([IdMovie]) REFERENCES [dbo].[Movie] ([IdMovie]);


GO
PRINT N'Creating [dbo].[FK_MovieCast_ToMovie]...';


GO
ALTER TABLE [dbo].[MovieCast] WITH NOCHECK
    ADD CONSTRAINT [FK_MovieCast_ToMovie] FOREIGN KEY ([idMovie]) REFERENCES [dbo].[Movie] ([IdMovie]);


GO
PRINT N'Creating [dbo].[FK_MovieGenre_ToMovie]...';


GO
ALTER TABLE [dbo].[MovieGenre] WITH NOCHECK
    ADD CONSTRAINT [FK_MovieGenre_ToMovie] FOREIGN KEY ([IdMovie]) REFERENCES [dbo].[Movie] ([IdMovie]);


GO
PRINT N'Creating [dbo].[FK_Rating_ToMovie]...';


GO
ALTER TABLE [dbo].[Rating] WITH NOCHECK
    ADD CONSTRAINT [FK_Rating_ToMovie] FOREIGN KEY ([IdMovie]) REFERENCES [dbo].[Movie] ([IdMovie]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[DirectorMovie] WITH CHECK CHECK CONSTRAINT [FK_DirectorMovie_ToDirector];

ALTER TABLE [dbo].[MovieGenre] WITH CHECK CHECK CONSTRAINT [FK_MovieGenre_ToGenre];

ALTER TABLE [dbo].[Critics] WITH CHECK CHECK CONSTRAINT [FK_Critics_ToMovie];

ALTER TABLE [dbo].[DirectorMovie] WITH CHECK CHECK CONSTRAINT [FK_DirectorMovie_ToMovie];

ALTER TABLE [dbo].[MovieCast] WITH CHECK CHECK CONSTRAINT [FK_MovieCast_ToMovie];

ALTER TABLE [dbo].[MovieGenre] WITH CHECK CHECK CONSTRAINT [FK_MovieGenre_ToMovie];

ALTER TABLE [dbo].[Rating] WITH CHECK CHECK CONSTRAINT [FK_Rating_ToMovie];


GO
PRINT N'Update complete.';


GO
